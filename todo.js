// Generated by CoffeeScript 1.3.3
(function() {
  var ToDo, arr, button, containerDiv, randomToDo, randomToDos,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  containerDiv = d3.select("#containerDiv");

  button = d3.select("#button").on("click", function() {
    return new ToDo();
  });

  arr = [];

  randomToDos = ["buy mayonaise to finish making sandwich and eat sandwich", "tie shoes CORRECTLY", "build sandbox near guest house", "don't overdose on Nyquil", "sharpen toothpicks for meetup group", "share true feelings with crush", "fix hole in pants butt", "practice wookie impression", "do things that will not lead to regret", "bury timecapsule in the lot where they're going to build that new Walmart"];

  randomToDo = function() {
    return randomToDos[Math.floor(Math.random() * 10)];
  };

  window.onload = function() {
    var arrLS, i, obj, _i, _len, _results;
    if (localStorage.todos != null) {
      arrLS = JSON.parse(localStorage.todos);
      _results = [];
      for (i = _i = 0, _len = arrLS.length; _i < _len; i = ++_i) {
        obj = arrLS[i];
        try {
          _results.push(new ToDo(i, obj.timestamp, obj.description));
        } catch (e) {
          _results.push(console.log(e));
        }
      }
      return _results;
    } else {
      return new ToDo();
    }
  };

  ToDo = (function() {

    function ToDo(index, timestamp, description, id) {
      var div, rbutton, remove, updateDescription;
      this.index = index != null ? index : arr.length;
      this.timestamp = timestamp != null ? timestamp : new Date().getTime();
      this.description = description != null ? description : randomToDo();
      this.id = id;
      this.remove = __bind(this.remove, this);

      this.changeIndex = __bind(this.changeIndex, this);

      this.updateDescription = __bind(this.updateDescription, this);

      this.updateSize = __bind(this.updateSize, this);

      updateDescription = this.updateDescription;
      div = containerDiv.append("div").attr("class", "toDo").text(this.description).attr("contenteditable", "true").on("keyup", function() {
        return updateDescription(this.textContent);
      });
      this.updateSize(div);
      remove = this.remove;
      rbutton = containerDiv.append("span").attr("class", "removeButton").text("done").on("click", function() {
        return remove(div, rbutton);
      });
      containerDiv.append("br");
      arr.push(this);
      localStorage.todos = JSON.stringify(arr);
      this.startInterval(div);
    }

    ToDo.prototype.startInterval = function(div) {
      var updateSize;
      updateSize = this.updateSize;
      return window.setInterval(function() {
        return updateSize(div);
      }, 1000 * 60 * 5);
    };

    ToDo.prototype.updateSize = function(div) {
      var age;
      age = Math.ceil((new Date().getTime() - this.timestamp) / 1000000) / 100;
      div.style("font-size", "" + (1 + age) + "em");
      if (age >= 6.05) {
        return div.attr("class", "toDo comicSans");
      }
    };

    ToDo.prototype.updateDescription = function(newDescription) {
      this.description = newDescription;
      arr[this.index] = this;
      return localStorage.todos = JSON.stringify(arr);
    };

    ToDo.prototype.changeIndex = function() {};

    ToDo.prototype.remove = function(div, rbutton) {
      div.remove();
      rbutton.remove();
      arr[this.index] = null;
      return localStorage.todos = JSON.stringify(arr);
    };

    return ToDo;

  })();

}).call(this);
